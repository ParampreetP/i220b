#include "cache-sim.h"
#include "memalloc.h"
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stddef.h>
#include <math.h>

/** Create and return a new cache-simulation structure for a
 *  cache for main memory withe the specified cache parameters params.
 *  No guarantee that *params is valid after this call.
 */


typedef struct Set Set;
struct Set{
  MemAddr addr;
  unsigned long ind;
  bool is_Valid;
};

struct CacheSimImpl {
  Set ** sets;
  CacheParams param;
  //int numSets;      

};

int Pow_M(int a, int b){
  int ret = 1;
  for (int i = 0; i < b; i++){
    ret *= a;
  }
  return ret;
}
CacheSim *
new_cache_sim(const CacheParams *params)
{
  CacheParams cache;
  cache.nSetBits = params->nSetBits; /** s # of sets is 2** this */
  cache.nLineBits = params->nLineBits; /** b # of bytes/line is 2**this */
  cache.nMemAddrBits = params->nMemAddrBits; /** m # of primary mem addr;
                                   				 total primary addr space is 2**this*/
  cache.replacement = params->replacement; /** replacement strategy*/
  cache.nLinesPerSet = params->nLinesPerSet;/** E # of cache lines/ set */

  CacheSim * ret = malloc(sizeof(cache) * sizeof(struct CacheSimImpl));
  int nSets = Pow_M(2, params->nSetBits);
  ret->param = cache;
  ret->sets = malloc(nSets * sizeof(struct Set *) + 1);

  for(int i = 0; i < nSets; i++){
    ret->sets[i] = malloc(params->nLinesPerSet * sizeof(struct Set));
    for (int j = 0; j < params->nLinesPerSet; j++){
      ret->sets[i][j].addr = 0x0;
    }
    for (int j = 0; j < params->nLinesPerSet; j++){
      ret->sets[i][j].ind = 0;
    }
    for (int j = 0; j < params->nLinesPerSet; j++){
      ret->sets[i][j].is_Valid = false;
    }
  }
  return ret;
}

/** Free all resources used by cache-simulation structure *cache */
void
free_cache_sim(CacheSim *cache)
{
  //free all memory used
  for(int i = 0; i < (1 << cache->param.nSetBits); i++){
    free(cache->sets[i]);
  }
  free(cache->sets);
  free(cache);
}

/** Return result for addr requested from cache */
CacheResult
cache_sim_result(CacheSim *cache, MemAddr addr)
{
  //@TODO
  CacheStatus status;
  //CacheResult result  = { CACHE_MISS_WITH_REPLACE, replaceAddr };
  MemAddr newAddr = addr >> cache->param.nLineBits;
  newAddr <<= cache->param.nLineBits;

  int set = (((Pow_M(2, cache->param.nSetBits) - 1) << cache->param.nLineBits) & addr) >> cache->param.nLineBits;
  int nLines = cache->param.nLinesPerSet;

  for(int i = 0; i < nLines; i++){
    cache->sets[set][i].ind++;
    
    if(!cache->sets[set][i].is_Valid){
      cache->sets[set][i].addr = newAddr;
      cache->sets[set][i].is_Valid = true;
      cache->sets[set][i].ind = 0;
      status = 1;
      return (CacheResult) { .status = status, .replaceAddr = 0x0};
    }
    else if(cache->sets[set][i].addr == newAddr){
       cache->sets[set][i].ind = 0;
      status = 0;
      return (CacheResult) { .status = status, .replaceAddr = 0x0};
    }
    
  }

  MemAddr tempaddr;
  int replace = cache->param.replacement;
  if(replace == MRU_R){ //replacement strategy is MRU
    int ind = 0;
    int least = cache->sets[set][0].ind;
    for(int i = 0; i < nLines; i++){
      if(least > cache->sets[set][i].ind){
		least = cache->sets[set][i].ind;
		ind = i;
      }
    }
    tempaddr = cache->sets[set][ind].addr;
    cache->sets[set][ind].addr = newAddr;
  }
  else if(replace == LRU_R){ //replacement strategy is LRU
    int ind = 0;
    int greatest = 0;
    for(int i = 0; i < nLines; i++){
   		if(greatest < cache->sets[set][i].ind){
			greatest = cache->sets[set][i].ind;
			ind = i;
      }
    }
    tempaddr = cache->sets[set][ind].addr;
    cache->sets[set][ind].addr = newAddr;

  }
  else{
  	 //replacement strategy is Random
    int ind = rand() % nLines;
    tempaddr = cache->sets[set][ind].addr;
    cache->sets[set][ind].addr = newAddr;
  }
  return (CacheResult) { .status = 2, .replaceAddr = tempaddr};
}
